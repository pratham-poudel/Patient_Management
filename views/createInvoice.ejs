<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Invoice</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    body {
      background-color: #f1f5f9;
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }
    .container {
      background-color: #ffffff;
      border-radius: 8px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
      padding: 2rem;
      max-width: 800px;
    }
    .header-title {
      color: #2c3e50;
      text-transform: uppercase;
      letter-spacing: 0.05em;
      font-weight: 700;
    }
    .custom-input {
      border: 1px solid #d1d5db;
      padding: 0.75rem;
      border-radius: 6px;
      transition: border-color 0.2s ease;
    }
    .custom-input:focus {
      border-color: #1e40af;
      outline: none;
    }
    .custom-table {
      width: 100%;
      border-collapse: collapse;
      margin-top: 1.5rem;
    }
    .custom-table th {
      background-color: #1e293b;
      color: white;
      padding: 0.75rem;
      text-align: left;
      text-transform: uppercase;
      font-size: 0.875rem;
    }
    .custom-table td {
      padding: 0.75rem;
      border-bottom: 1px solid #e2e8f0;
    }
    .custom-table tr:last-child td {
      border-bottom: none;
    }
    .total-price {
      font-size: 1.25rem;
      font-weight: 600;
      color: #1f2937;
    }
    .submit-btn {
      background-color: #2563eb;
      color: white;
      padding: 0.75rem;
      border-radius: 6px;
      transition: background-color 0.2s ease;
    }
    .submit-btn:hover {
      background-color: #1d4ed8;
    }
    .delete-btn {
      background-color: #ef4444;
      color: white;
      padding: 0.5rem;
      border-radius: 6px;
      cursor: pointer;
      transition: background-color 0.2s ease;
    }
    .delete-btn:hover {
      background-color: #dc2626;
    }
  </style>
</head>
<body>
  <div class="container mx-auto my-10 p-10">
    <h1 class="text-2xl header-title text-center mb-8">Create Invoice Slip</h1>

    <!-- Customer Details Form -->
    <div class="mb-10">
      <h2 class="text-xl font-semibold mb-4">Customer Details</h2>
      <form id="customer-form" class="space-y-6">
        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
          <input type="text" id="customer-name" class="custom-input w-full" placeholder="Customer Name" required />
          <input type="text" id="customer-address" class="custom-input w-full" placeholder="Address" required />
          <input type="number" id="customer-age" class="custom-input w-full" placeholder="Age" min="1" required />
          <input type="tel" id="customer-phone" class="custom-input w-full" placeholder="Phone Number" pattern="[0-9]{10}" required />
        </div>
      </form>
    </div>

    <!-- Invoice Form -->
    <div>
      <h2 class="text-xl font-semibold mb-4">Invoice Items</h2>
      <form id="invoice-form" class="space-y-4">
        <div class="grid grid-cols-1 md:grid-cols-3 gap-4">
          <input type="text" id="item-name" class="custom-input w-full" placeholder="Item Name" required />
          <input type="number" id="quantity" class="custom-input w-full" placeholder="Quantity" min="1" required />
          <input type="number" id="price" class="custom-input w-full" placeholder="Price" step="0.01" min="0" required />
        </div>
      </form>
    </div>

    <!-- Invoice Items Table -->
    <div class="mt-6">
      <table class="custom-table">
        <thead>
          <tr>
            <th>Item</th>
            <th>Quantity</th>
            <th>Price</th>
            <th>Total</th>
            <th>Actions</th>
          </tr>
        </thead>
        <tbody id="invoice-items">
          <!-- Items will be dynamically added here -->
        </tbody>
      </table>
      <div class="flex justify-end mt-4">
        <h3 class="total-price">Total Price: ₹<span id="total-price">0.00</span></h3>
      </div>
    </div>

    <!-- Submit Button -->
    <div class="mt-8">
      <button id="submit-invoice" class="submit-btn w-full">Submit Invoice</button>
    </div>
  </div>

  <script>
    const invoiceItems = [];
    const invoiceItemsTable = document.getElementById('invoice-items');
    const totalPriceEl = document.getElementById('total-price');
    const itemNameInput = document.getElementById('item-name');
    const quantityInput = document.getElementById('quantity');
    const priceInput = document.getElementById('price');

    // Check if all customer details are filled
    function isCustomerDetailsFilled() {
      const customerName = document.getElementById('customer-name').value;
      const customerAddress = document.getElementById('customer-address').value;
      const customerAge = document.getElementById('customer-age').value;
      const customerPhone = document.getElementById('customer-phone').value;

      return customerName && customerAddress && customerAge && customerPhone;
    }

    // Add item using Enter key
    document.getElementById('invoice-form').addEventListener('keydown', function (event) {
      if (event.key === 'Enter') {
        event.preventDefault();
        addItem();
      }
    });

    // Function to calculate the total price
    function calculateTotalPrice() {
      const total = invoiceItems.reduce((acc, item) => acc + item.quantity * item.price, 0);
      totalPriceEl.textContent = total.toFixed(2);
    }

    // Function to render the invoice items in the table
    function renderInvoiceItems() {
      invoiceItemsTable.innerHTML = '';
      invoiceItems.forEach((item, index) => {
        const row = document.createElement('tr');
        row.classList.add('border-b');
        row.innerHTML = `
          <td class="py-2 px-4">${item.name}</td>
          <td class="py-2 px-4">${item.quantity}</td>
          <td class="py-2 px-4">₹${item.price.toFixed(2)}</td>
          <td class="py-2 px-4">₹${(item.quantity * item.price).toFixed(2)}</td>
          <td class="py-2 px-4">
            <button class="delete-btn" onclick="deleteItem(${index})">Delete</button>
          </td>
        `;
        invoiceItemsTable.appendChild(row);
      });
      calculateTotalPrice(); // Update the total price whenever items are added
    }

    // Add item to invoice
    function addItem() {
      if (!isCustomerDetailsFilled()) {
        alert('Please fill in customer details before adding items.');
        return;
      }

      const itemName = itemNameInput.value;
      const quantity = parseInt(quantityInput.value);
      const price = parseFloat(priceInput.value);

      if (itemName && quantity > 0 && price >= 0) {
        const newItem = {
          name: itemName,
          quantity: quantity,
          price: price,
        };
        invoiceItems.push(newItem);
        renderInvoiceItems();

        // Clear input fields after adding
        itemNameInput.value = '';
        quantityInput.value = '';
        priceInput.value = '';

        // Focus back to item name input for adding new items
        itemNameInput.focus();
      } else {
        alert('Please enter valid item details.');
      }
    }

    // Delete item from invoice
    function deleteItem(index) {
      invoiceItems.splice(index, 1);
      renderInvoiceItems();
    }

    // Handle arrow keys to navigate through inputs
    document.addEventListener('keydown', function (event) {
      const activeElement = document.activeElement;

      if (event.key === 'ArrowDown') {
        if (activeElement.id === 'item-name') {
          quantityInput.focus();
        } else if (activeElement.id === 'quantity') {
          priceInput.focus();
        }
      }

      if (event.key === 'ArrowUp') {
        if (activeElement.id === 'price') {
          quantityInput.focus();
        } else if (activeElement.id === 'quantity') {
          itemNameInput.focus();
        }
      }
    });

    // Handle invoice submission
    document.getElementById('submit-invoice').addEventListener('click', () => {
      const customerName = document.getElementById('customer-name').value;
      const customerAddress = document.getElementById('customer-address').value;
      const customerAge = document.getElementById('customer-age').value;
      const customerPhone = document.getElementById('customer-phone').value;

      if (!isCustomerDetailsFilled() || invoiceItems.length === 0) {
        alert('Please fill in all the customer details and add at least one item.');
        return;
      }

      const invoiceData = {
        customer: {
          name: customerName,
          address: customerAddress,
          age: customerAge,
          phone: customerPhone,
        },
        items: invoiceItems,
        totalPrice: parseFloat(totalPriceEl.textContent),
      };

      // Send the data to the backend (replace '/submit-invoice' with your backend route)
      fetch('/submit-invoice', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify(invoiceData),
})
  .then((response) => {
    if (response.ok) {
      return response.json(); // If successful, parse the JSON response
    } else {
      throw new Error('Failed to submit the invoice'); // Trigger the error block for failure
    }
  })
  .then((data) => {
    alert(`${data.message}`);
    
    // Redirect to the print invoice page with the invoice ID
    window.location.href = `/printinvoice/${data.invoice}`;
    
    // Clear form after submission
    document.getElementById('customer-form').reset();
    invoiceItems.length = 0;
    renderInvoiceItems();
  })
  .catch((error) => {
    // Display error message if submission fails
    alert(`Error: ${error.message}`);
  });

    });
 </script>
</body>
</html>
