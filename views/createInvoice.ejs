<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Create Invoice</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <style>
    body {
      background-color: #f4f4f9;
    }
    .custom-border {
      border: 2px solid #4a5568;
    }
    .custom-btn {
      background-color: #4a5568;
    }
    .custom-btn:hover {
      background-color: #2d3748;
    }
    .invoice-header {
      background-color: #4a5568;
      color: #fff;
    }
  </style>
</head>
<body class="font-serif">
  <div class="container mx-auto py-10">
    <div class="max-w-3xl mx-auto bg-white p-10 shadow-xl rounded-lg custom-border">
      <h1 class="text-3xl font-bold mb-6 text-center">Create Invoice Slip</h1>

      <!-- Customer Details Form -->
      <div class="mb-8">
        <h2 class="text-xl font-bold mb-4">Customer Details</h2>
        <form id="customer-form" class="space-y-4">
          <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
            <input
              type="text"
              id="customer-name"
              class="w-full p-3 border rounded-md focus:outline-none focus:border-indigo-500"
              placeholder="Customer Name"
              required
            />
            <input
              type="text"
              id="customer-address"
              class="w-full p-3 border rounded-md focus:outline-none focus:border-indigo-500"
              placeholder="Address"
              required
            />
            <input
              type="number"
              id="customer-age"
              class="w-full p-3 border rounded-md focus:outline-none focus:border-indigo-500"
              placeholder="Age"
              min="1"
              required
            />
            <input
              type="tel"
              id="customer-phone"
              class="w-full p-3 border rounded-md focus:outline-none focus:border-indigo-500"
              placeholder="Phone Number"
              pattern="[0-9]{10}"
              required
            />
          </div>
        </form>
      </div>

      <!-- Invoice Form -->
      <div>
        <h2 class="text-xl font-bold mb-4">Invoice Items</h2>
        <form id="invoice-form" class="space-y-4">
          <div class="flex space-x-4">
            <input
              type="text"
              id="item-name"
              class="w-full p-2 border rounded-md focus:outline-none focus:border-indigo-500"
              placeholder="Item Name"
              required
            />
            <input
              type="number"
              id="quantity"
              class="w-full p-2 border rounded-md focus:outline-none focus:border-indigo-500"
              placeholder="Quantity"
              min="1"
              required
            />
            <input
              type="number"
              id="price"
              class="w-full p-2 border rounded-md focus:outline-none focus:border-indigo-500"
              placeholder="Price"
              step="0.01"
              min="0"
              required
            />
          </div>
        </form>
      </div>

      <!-- Invoice Items Table -->
      <div class="mt-6">
        <table class="min-w-full bg-white border rounded-lg">
          <thead>
            <tr class="invoice-header">
              <th class="py-2 px-4 text-left">Item</th>
              <th class="py-2 px-4 text-left">Quantity</th>
              <th class="py-2 px-4 text-left">Price</th>
              <th class="py-2 px-4 text-left">Total</th>
            </tr>
          </thead>
          <tbody id="invoice-items">
            <!-- Items will be dynamically added here -->
          </tbody>
        </table>
        <div class="flex justify-end mt-4">
          <h3 class="text-xl font-bold">Total Price: ₹<span id="total-price">0.00</span></h3>
        </div>
      </div>

      <!-- Submit Button -->
      <div class="mt-6">
        <button
          id="submit-invoice"
          class="w-full custom-btn text-white py-2 px-4 rounded-md hover:bg-indigo-700"
        >
          Submit Invoice
        </button>
      </div>
    </div>
  </div>

  <script>
    const invoiceItems = [];
    const invoiceItemsTable = document.getElementById('invoice-items');
    const totalPriceEl = document.getElementById('total-price');
    const itemNameInput = document.getElementById('item-name');
    const quantityInput = document.getElementById('quantity');
    const priceInput = document.getElementById('price');

    // Check if all customer details are filled
    function isCustomerDetailsFilled() {
      const customerName = document.getElementById('customer-name').value;
      const customerAddress = document.getElementById('customer-address').value;
      const customerAge = document.getElementById('customer-age').value;
      const customerPhone = document.getElementById('customer-phone').value;

      return customerName && customerAddress && customerAge && customerPhone;
    }

    // Add item using Enter key
    document.getElementById('invoice-form').addEventListener('keydown', function (event) {
      if (event.key === 'Enter') {
        event.preventDefault();
        addItem();
      }
    });

    // Function to calculate the total price
    function calculateTotalPrice() {
      const total = invoiceItems.reduce((acc, item) => acc + item.quantity * item.price, 0);
      totalPriceEl.textContent = total.toFixed(2);
    }

    // Function to render the invoice items in the table
    function renderInvoiceItems() {
      invoiceItemsTable.innerHTML = '';
      invoiceItems.forEach((item, index) => {
        const row = document.createElement('tr');
        row.classList.add('border-b');
        row.innerHTML = `
          <td class="py-2 px-4">${item.name}</td>
          <td class="py-2 px-4">${item.quantity}</td>
          <td class="py-2 px-4">₹${item.price.toFixed(2)}</td>
          <td class="py-2 px-4">₹${(item.quantity * item.price).toFixed(2)}</td>
        `;
        invoiceItemsTable.appendChild(row);
      });
      calculateTotalPrice(); // Update the total price whenever items are added
    }

    // Add item to invoice
    function addItem() {
      if (!isCustomerDetailsFilled()) {
        alert('Please fill in customer details before adding items.');
        return;
      }

      const itemName = itemNameInput.value;
      const quantity = parseInt(quantityInput.value);
      const price = parseFloat(priceInput.value);

      if (itemName && quantity > 0 && price >= 0) {
        const newItem = {
          name: itemName,
          quantity: quantity,
          price: price,
        };
        invoiceItems.push(newItem);
        renderInvoiceItems();

        // Clear input fields after adding
        itemNameInput.value = '';
        quantityInput.value = '';
        priceInput.value = '';

        // Focus back to item name input for adding new items
        itemNameInput.focus();
      } else {
        alert('Please enter valid item details.');
      }
    }

    // Handle arrow keys to navigate through inputs
    document.addEventListener('keydown', function (event) {
      const activeElement = document.activeElement;

      if (event.key === 'ArrowDown') {
        if (activeElement.id === 'item-name') {
          quantityInput.focus();
        } else if (activeElement.id === 'quantity') {
          priceInput.focus();
        }
      }

      if (event.key === 'ArrowUp') {
        if (activeElement.id === 'price') {
          quantityInput.focus();
        } else if (activeElement.id === 'quantity') {
          itemNameInput.focus();
        }
      }
    });

    // Handle form submission (logic is unchanged from before)
    document.getElementById('submit-invoice').addEventListener('click', () => {
      const customerName = document.getElementById('customer-name').value;
      const customerAddress = document.getElementById('customer-address').value;
      const customerAge = document.getElementById('customer-age').value;
      const customerPhone = document.getElementById('customer-phone').value;

      if (!isCustomerDetailsFilled() || invoiceItems.length === 0) {
        alert('Please fill in all the customer details and add at least one item.');
        return;
      }

      const invoiceData = {
        customer: {
          name: customerName,
          address: customerAddress,
          age: customerAge,
          phone: customerPhone,
        },
        items: invoiceItems,
        totalPrice: parseFloat(totalPriceEl.textContent),
      };

      // Send the data to the backend (replace '/submit-invoice' with your backend route)
      fetch('/submit-invoice', {
  method: 'POST',
  headers: {
    'Content-Type': 'application/json',
  },
  body: JSON.stringify(invoiceData),
})
  .then((response) => {
    if (response.ok) {
      return response.json(); // If successful, parse the JSON response
    } else {
      throw new Error('Failed to submit the invoice'); // Trigger the error block for failure
    }
  })
  .then((data) => {
    alert(`${data.message}`);
    
    // Redirect to the print invoice page with the invoice ID
    window.location.href = `/printinvoice/${data.invoice}`;
    
    // Clear form after submission
    document.getElementById('customer-form').reset();
    invoiceItems.length = 0;
    renderInvoiceItems();
  })
  .catch((error) => {
    // Display error message if submission fails
    alert(`Error: ${error.message}`);
  });

    });
  </script>
</body>
</html>
